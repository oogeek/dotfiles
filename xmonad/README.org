#+TITLE: Myconfig
#+DESCRIPTION: my Xmonad config
#+PROPERTY: header-args :tangle xmonad.hs
#+STARTUP: showeverything

* Table of Contents :toc:
- [[#introduction][Introduction]]
- [[#screenshots][screenshots]]
- [[#requirements][Requirements]]
- [[#how-to-install-pre-requisites][How to install pre-requisites]]
  - [[#on-arch-linux][on Arch Linux]]
- [[#installation][Installation]]
  - [[#starting-xmonad][Starting Xmonad]]
- [[#features-what-this-config-achieved-by-importing-xmonad-contrib-libraries][Features (what this config achieved by importing xmonad-contrib libraries)]]
- [[#notice][Notice]]
- [[#keyboard-shortcuts][Keyboard shortcuts]]
- [[#sources][Sources]]
  - [[#import-libraries][Import libraries]]
  - [[#personal-settings][personal settings]]
  - [[#startuphook-and-windowcount-for-xmobar][StartupHook and windowCount (for xmobar)]]
  - [[#gridconfig-color-setting-appgrid-][Gridconfig, Color Setting, AppGrid ...]]
  - [[#treeconfig-treeselection-][TreeConfig, TreeSelection, ...]]
  - [[#xpconfig][XPConfig]]
  - [[#search-in-xmonad][Search in XMonad]]
  - [[#scratchpad][ScratchPad]]
  - [[#prompt][Prompt]]
  - [[#hooks][Hooks]]
  - [[#workspaces-keymaps][Workspaces, keymaps]]
  - [[#layout][Layout]]
  - [[#xmobar-related][Xmobar related]]
  - [[#main-config-main][Main Config, Main]]

* Introduction
#+BEGIN_QUOTE
xmonad is a tiling window manager for X. Windows are arranged automatically to tile the screen without gaps or overlap, maximizing screen use. Window manager features are accessible from the keyboard: a mouse is optional.

xmonad is written, configured and extensible in Haskell. Custom layout algorithms, key bindings and other extensions may be written by the user in configuration files.

Layouts are applied dynamically, and different layouts may be used on each workspace. Xinerama is fully supported, allowing windows to be tiled on several physical screens.
#+END_QUOTE
from [[https://wiki.archlinux.org/index.php/Xmonad][Xmonad Arch Wiki]]
* screenshots
#+CAPTION: screenshot-1
#+ATTR_HTML: :alt screenshot-1 :style width="600px" height="338px" :title screenshot-1 :align left
[[https://github.com/oogeek/dotfiles/blob/main/Xmonad/workspaces.png]]
* Requirements
- xmonad
- xmonad-contrib
- xmobar
- rofi (optional)
- task (optional) -- a task manager
- conky (optional)
* How to install pre-requisites
** on Arch Linux
1. pacman -S xmonad xmonad-contrib xmobar
* Installation
** Starting Xmonad
*** startx
#+BEGIN_SRC bash 
#!/bin/sh

userresources=$HOME/.Xresources
usermodmap=$HOME/.Xmodmap
sysresources=/etc/X11/xinit/.Xresources
sysmodmap=/etc/X11/xinit/.Xmodmap

# merge in defaults and keymaps

if [ -f $sysresources ]; then
    xrdb -merge $sysresources
fi

if [ -f $sysmodmap ]; then
    xmodmap $sysmodmap
fi

if [ -f "$userresources" ]; then
    xrdb -merge "$userresources"
fi

if [ -f "$usermodmap" ]; then
    xmodmap "$usermodmap"
fi

# start some nice programs

if [ -d /etc/X11/xinit/xinitrc.d ] ; then
 for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do
  [ -x "$f" ] && . "$f"
 done
 unset f
fi

# Here Xmonad is kept as default
session=${1:-xmonad}
case $session in
    i3|i3wm           ) exec i3;;
    dwm           ) exec dwm;;
    kde               ) exec startplasma-x11;;
    xfce|xfce4        ) exec startxfce4;;
    xmonad            ) exec xmonad;;
    qtile             ) exec qtile ;;
    awesome           ) exec awesome ;;
    *                 ) echo "hei, no option";;
esac
#+END_SRC

* Features (what this config achieved by importing xmonad-contrib libraries)
- Users can add tags to windows, shift windows with the same tags, ...
- Clickable and dynamic workspaces are available, the total number of workspaces is somehow not limited
- Screencorer action: switching to previous/next workspace, gridselect menu, ...
* Notice
No install scripts, do it yourself, and backup any config before testing.
The default keybindings for switching workspaces and shifting windows are replaced with the ones using numpad. The default ones are removed using "removeKeysP"
* Keyboard shortcuts

| Key conbination | action         |
|-----------------+----------------|
| XMonad          |                |
|-----------------+----------------|
| M-S-q           | exit           |
| M-S-r           | restart        |
| M-<Return>      | spawn terminal |


| Screenshots     |                |
|-----------------+----------------|
| M1-S-s          | flameshot gui  |


| Sound           |                |
|-----------------+----------------|
| M1-S-u          | pamixer -i 2   |
| M1-S-p          | pamixer -d 2   |
| M1-S-m          | pamixer -t     |


| Prompts         |                |
|-----------------+----------------|
| M-S-<Return>    | shellPrompt    |
| M-p m           | manPrompt      |
| M-p c           | calcPrompt     |
| M-p t           | taskAddPrompt  |
| M1-C-o          | rofimoji       |
| M-o             | bringMenuArgs' |
| M-M1-h          | htop           |


|--------------+----------------------|
| Notification |                      |
|--------------+----------------------|
| M1-c         | dunstctl close-all   |
| M1-p         | dunstctl history-pop |


| Windows            |                            |
|--------------------+----------------------------|
| M-S-<KP_Add>       | shiftTo next workspace     |
| M-S-<KP_Subtract>  | shiftTo previous workspace |
| M-f                | toggle floats              |
| M-t                | sink windows               |
| M-S-t              | sinkAll windows            |
| M-<KP_Subtract>    | decWindowSpacing           |
| M-<KP_Add>         | incWindowSpacing           |
| M-M1-<KP_Subtract> | decScreenSpacing           |
| M-M1-<KP_Add>      | incScreenSpacing           |
| C-g g              | myAppGrid                  |
| C-g t              | goToSelected               |
| C-g b              | bringSelected              |
| C-t t              | treeselectAction           |


| Tags  |                                  |
|-------+----------------------------------|
| M-C-a | Add tag                          |
| M-C-h | move window with tag here        |
| M-C-d | delete tag                       |
| M-C-t | toggle between taged windows     |
| M-C-f | float windows with specific tags |


| Dynamic workspaces |                                           |
|--------------------+-------------------------------------------|
| M1-C-a             | append workspaces                         |
| M1-C-d             | remove empty workspace                    |
| M1-C-s             | select workspace to go                    |
| M1-C-r             | rename Workspace                          |
| M1-C-c             | copy focused window to selected workspace |


| Window navigation |                                       |
|-------------------+---------------------------------------|
| M-m               | focus master                          |
| M-j               | focus down                            |
| M-k               | focus up                              |
| M-S-m             | swap master                           |
| M-S-j             | swap down                             |
| M-S-k             | swap up                               |
| M-<Backspace>     | promote to master                     |
| M-S-<Tab>         | rotate all windows except master      |
| M-C-<Tab>         | rotate all the windows                |
| M-S-c             | kill focused window                   |
| M-S-a             | kill all windows on current workspace |


| window copy |                              |
|-------------+------------------------------|
| M-C-S-0     | copy to all workspaces       |
| M-C-S-1     | copy to the first workspace  |
| M-C-S-2     | copy to the second workspace |
| ......      |                              |
| M-C-S-9     | copy to the ninth workspace  |
| M-C-S-k     | kill all other copies        |


| layouts       |                                    |
|---------------+------------------------------------|
| M-<Tab>       | switch layout                      |
| M-C-M1-<Up>   | arrange                            |
| M-C-M1-<Down> | dearrange                          |
| M-<Space>     | toggle full                        |
| M-S-<Space>   | toggle structs                     |
| M-S-n         | toggle noborders                   |
| M-S-<Up>      | increase master                    |
| M-S-<Down>    | decrease master                    |
| M-C-<Up>      | increase number of windows (limit) |
| M-C-<Down>    | decrease number of windows (limit) |


| window resizing |                     |
|-----------------+---------------------|
| M-h             | shrink horizontally |
| M-l             | expand horizontally |
| M-M1-j          | shrink vertically   |
| M-M1-k          | expand vertically   |


* Sources
** Import libraries
#+BEGIN_SRC haskell
-- this is my xmonad.hs --

-- IMPORT --

    -- Base
import XMonad
import System.Directory
import System.IO (hPutStrLn)
import System.Exit (exitSuccess)
import qualified XMonad.StackSet as W

    -- Actions
-- import XMonad.Actions.CopyWindow (kill1, copy, copyToAll)
import XMonad.Actions.CopyWindow
-- import XMonad.Actions.CycleWS (moveTo, shiftTo, WSType(..), nextScreen, prevScreen)
import XMonad.Actions.GridSelect
import XMonad.Actions.MouseResize
import XMonad.Actions.Promote
import XMonad.Actions.RotSlaves (rotSlavesDown, rotAllDown)
import qualified XMonad.Actions.TreeSelect as TS
import XMonad.Actions.WindowGo (runOrRaise)
import XMonad.Actions.WithAll (sinkAll, killAll)
import qualified XMonad.Actions.Search as S
import XMonad.Actions.DynamicWorkspaces
-- import XMonad.Actions.WindowMenu
import qualified XMonad.Actions.FlexibleManipulate as Flex
import XMonad.Actions.CycleRecentWS
import XMonad.Actions.ShowText
import XMonad.Actions.OnScreen
import XMonad.Actions.CycleWS
import XMonad.Actions.TagWindows
import XMonad.Actions.WorkspaceNames
import XMonad.Actions.Plane
import XMonad.Actions.AfterDrag
import XMonad.Actions.MouseGestures
import XMonad.Actions.Commands
import qualified XMonad.Actions.FlexibleResize as Flex
-- import qualified XMonad.Actions.DynamicWorkspaceOrder as DO
import XMonad.Actions.SwapWorkspaces
import XMonad.Actions.WindowBringer

    -- Data
import Data.Char (isSpace, toUpper)
import Data.Maybe (fromJust, isJust)
import Data.Monoid
import Data.Tree
import Data.Text (isInfixOf, pack)
import qualified Data.Map as M
import Data.List.Split
import Data.Time.LocalTime
import Data.Time.Format

    -- Hooks
import XMonad.Hooks.DynamicLog (pad, dynamicLogWithPP, wrap, xmobarPP, xmobarColor, shorten, PP(..))
import XMonad.Hooks.FadeInactive
import XMonad.Hooks.ManageDocks (avoidStruts, docksEventHook, manageDocks, ToggleStruts(..))
import XMonad.Hooks.ManageHelpers (isFullscreen, doFullFloat)
import XMonad.Hooks.ServerMode
import XMonad.Hooks.SetWMName
import XMonad.Hooks.WorkspaceHistory
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.WallpaperSetter
import XMonad.Hooks.ScreenCorners
import XMonad.Hooks.FadeWindows
import XMonad.Hooks.XPropManage
import XMonad.Hooks.UrgencyHook

    -- Layouts
import XMonad.Layout.GridVariants (Grid(Grid))
import XMonad.Layout.SimplestFloat
import XMonad.Layout.Spiral
import XMonad.Layout.ResizableTile
import XMonad.Layout.Tabbed
import XMonad.Layout.ThreeColumns
import XMonad.Layout.ImageButtonDecoration
import XMonad.Layout.Minimize
import XMonad.Layout.Maximize
import XMonad.Layout.Accordion
import XMonad.Layout.WindowSwitcherDecoration
import XMonad.Layout.DraggingVisualizer
import XMonad.Layout.DecorationAddons
-- import XMonad.Layout.MagicFocus

    -- Layouts modifiers
import XMonad.Layout.LayoutModifier
import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
import XMonad.Layout.Magnifier
import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), (??))
import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, MIRROR, NOBORDERS))
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed
import XMonad.Layout.ShowWName
import XMonad.Layout.Simplest
import XMonad.Layout.Spacing
import XMonad.Layout.SubLayouts
import XMonad.Layout.WindowNavigation
import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))
import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))
import qualified XMonad.Layout.MultiToggle as MT (Toggle(..))

    -- Prompt
import XMonad.Prompt
import XMonad.Prompt.Input
import XMonad.Prompt.FuzzyMatch
import XMonad.Prompt.Man
import XMonad.Prompt.Pass
import XMonad.Prompt.Shell
import XMonad.Prompt.Workspace
import XMonad.Prompt.AppendFile
import XMonad.Prompt.ConfirmPrompt

-- import XMonad.Prompt.Ssh
import XMonad.Prompt.Unicode
import XMonad.Prompt.XMonad
import Control.Arrow (first)
import Control.Monad

   -- Utilities
import XMonad.Util.EZConfig
import XMonad.Util.NamedScratchpad
import XMonad.Util.Run (runProcessWithInput, safeSpawn, spawnPipe)
import XMonad.Util.SpawnOnce
import XMonad.Util.Paste (pasteSelection)
import XMonad.Util.Themes
import XMonad.Util.Timer (startTimer, handleTimer)
import XMonad.Util.Dmenu

#+END_SRC

** personal settings
#+BEGIN_SRC haskell
myFont :: String
myFont = "xft:Inter:bold:size=16:antialias=true:hinting=true"

myFont' :: String
myFont'= "xft:Inter:bold:size=26:antialias=true:hinting=true"

myModMask :: KeyMask
myModMask = mod4Mask

myTerminal :: String
myTerminal = "kitty"

myBrowser :: String
myBrowser = "firefox-beta "

myEditor :: String
myEditor = myTerminal ++ " sh -c vim "    -- Sets vim as editor for tree select

myBorderWidth :: Dimension
myBorderWidth = 2

myNormColor :: String
myNormColor   = "#282c34"  -- Border color of normal windows

myFocusColor :: String
myFocusColor  = magenta

altMask :: KeyMask
altMask = mod1Mask         -- Setting this for use in xprompts

#+END_SRC

** StartupHook and windowCount (for xmobar)
#+BEGIN_SRC haskell
windowCount :: X (Maybe String)
windowCount = gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset

myStartupHook :: X ()
myStartupHook = do
    -- return is important here for checkKeymap to work properly
           return ()
           checkKeymap myConfig' myKeys
           spawnOnce "picom &" -- compositor
    -- temporary fix for the alsa component of xmobar consume 100% cpu
           spawn "ps axo pid,s,command | awk '/alsactl monitor default$/' | xargs --no-run-if-empty kill"
           addScreenCorners [ (SCLowerLeft,  prevWS)
                            , (SCLowerRight, nextWS)
                          --  , (SCUpperLeft, spawnSelected' myAppGrid)
                            , (SCUpperRight, goToSelected $ mygridConfig' myColorizer)
                             ]
           spawn "wmname LG3D"
#+END_SRC

** Gridconfig, Color Setting, AppGrid ...
#+BEGIN_SRC haskell

--colors

-- black   = "#282a36"  -- black
-- green   = "#5af78e"  -- green
-- blue    = "#57c7ff"  -- blue
-- magenta = "#ff6ac1"  -- magenta
-- white   = "#f1f1f0"  -- white
black   = "#21222c"
red     = "#ff5555"
green   = "#50fa7b"
yellow  = "#f1fa8c"
blue    = "#bd93f9"
magenta = "#ff79c6"
cyan    = "#8be9fd"
white   = "#f8f8f2"
orange  = "#ffb86c"
purple  = "#bd9cf9"

myColorizer :: Window -> Bool -> X (String, String)
myColorizer = colorRangeFromClassName
                  (0x28,0x2c,0x34) -- lowest inactive bg
                  (0x28,0x2c,0x34) -- highest inactive bg
                  (0xc7,0x92,0xea) -- active bg
                  (0xc0,0xa7,0x9a) -- inactive fg
                  (0x28,0x2c,0x34) -- active fg

mygridConfig :: p -> GSConfig Window
mygridConfig colorizer = (buildDefaultGSConfig myColorizer)
    { gs_cellheight   = 90
    , gs_cellwidth    = 400
    , gs_cellpadding  = 6
    , gs_originFractX = 0.5
    , gs_originFractY = 0.5
    , gs_font         = myFont'
    }


mygridConfig' :: p -> GSConfig Window
mygridConfig' colorizer = (buildDefaultGSConfig myColorizer){
      gs_cellheight   = 90
    , gs_cellwidth    = 450
    , gs_cellpadding  = 10
    , gs_originFractX = 0.5
    , gs_originFractY = 0.5
    , gs_font         = myFont'

    }

spawnSelected' :: [(String, String)] -> X ()
spawnSelected' lst = gridselect conf lst >>= flip whenJust spawn
    where conf = def
                   { gs_cellheight   = 90
                   , gs_cellwidth    = 400
                   , gs_cellpadding  = 6
                   , gs_originFractX = 0.5
                   , gs_originFractY = 0.5
                   , gs_font         = myFont'
                   }

myAppGrid = [ ("Audacity", "audacity")
                 , ("MPV", "mpv")
                 , ("Emacs", "emacsclient -c -a emacs")
                 , ("Firefox", "firefox")
                 , ("Firefox-Beta", "firefox-beta")
                 , ("Firefox-Nightly", "firefox-nightly")
                 , ("Chromium", "chromium")
                 , ("Google-Chrome", "google-chrome-stable")
                 , ("Gimp", "gimp")
                 , ("Kdenlive", "kdenlive")
                 , ("LibreOffice Impress", "loimpress")
                 , ("LibreOffice Writer", "lowriter")
                 , ("OBS", "obs")
                 , ("PCManFM", "pcmanfm")
                 ]
#+END_SRC

** TreeConfig, TreeSelection, ...
#+BEGIN_SRC haskell
treeselectAction :: TS.TSConfig (X ()) -> X ()
treeselectAction a = TS.treeselectAction a
   [ Node (TS.TSNode "+ Accessories" "Accessory applications" (return ()))
     []
   , Node (TS.TSNode "+ Screenshots" "take a screenshot" (return ()))
       [ Node (TS.TSNode "Quick fullscreen" "take screenshot immediately" (spawn "scrot -q 100 -d 1 ~/scrot/%Y-%m-%d-%H-%M-%S-scrot.png")) []
       , Node (TS.TSNode "Delayed fullscreen" "take screenshot in 5 secs" (spawn "scrot -q 100 -d 5 ~/scrot/%Y-%m-%d-%H-%M-%S-scrot.png")) []
       , Node (TS.TSNode "Section screenshot" "take screenshot of section" (spawn "scrot -q 100 -s ~/scrot/%Y-%m-%d-%H-%M-%S-scrot.png")) []
       ]
   , Node (TS.TSNode "------------------------" "" (spawn "xdotool key Escape")) []
   , Node (TS.TSNode "+ XMonad Controls" "window manager commands" (return ()))
       [ Node (TS.TSNode "+ View Workspaces" "View a specific workspace" (return ()))
         [ Node (TS.TSNode "View 1" "View workspace 1" (spawn "~/.xmonad/xmonadctl 1")) []
         , Node (TS.TSNode "View 2" "View workspace 2" (spawn "~/.xmonad/xmonadctl 3")) []
         ]

       , Node (TS.TSNode "+ Shift Workspaces" "Send focused window to specific workspace" (return ()))
         [ Node (TS.TSNode "View 1" "View workspace 1" (spawn "~/.xmonad/xmonadctl 2")) []
         , Node (TS.TSNode "View 2" "View workspace 2" (spawn "~/.xmonad/xmonadctl 4")) []
         ]
       ]
   ]

tsDefaultConfig :: TS.TSConfig a
tsDefaultConfig = TS.TSConfig { TS.ts_hidechildren = True
                              , TS.ts_background   = 0xdd282c34
                              , TS.ts_font         = myFont'
                              , TS.ts_node         = (0xffd0d0d0, 0xff1c1f24)
                              , TS.ts_nodealt      = (0xffd0d0d0, 0xff282c34)
                              , TS.ts_highlight    = (0xffffffff, 0xff755999)
                              , TS.ts_extra        = 0xffd0d0d0
                              , TS.ts_node_width   = 400
                              , TS.ts_node_height  = 40
                              , TS.ts_originX      = 100
                              , TS.ts_originY      = 100
                              , TS.ts_indent       = 80
                              , TS.ts_navigate     = myTreeNavigation
                              }

myTreeNavigation = M.fromList
    [ ((0, xK_Escape),   TS.cancel)
    , ((0, xK_Return),   TS.select)
    , ((0, xK_space),    TS.select)
    , ((0, xK_Up),       TS.movePrev)
    , ((0, xK_Down),     TS.moveNext)
    , ((0, xK_Left),     TS.moveParent)
    , ((0, xK_Right),    TS.moveChild)
    , ((0, xK_k),        TS.movePrev)
    , ((0, xK_j),        TS.moveNext)
    , ((0, xK_h),        TS.moveParent)
    , ((0, xK_l),        TS.moveChild)
    , ((0, xK_o),        TS.moveHistBack)
    , ((0, xK_i),        TS.moveHistForward)
    , ((0, xK_r),        TS.moveTo ["+ Screenshots"])
    , ((mod4Mask, xK_l), TS.moveTo ["+ Bookmarks", "+ Linux"])
    , ((mod4Mask, xK_e), TS.moveTo ["+ Bookmarks", "+ Emacs"])
    , ((mod4Mask, xK_s), TS.moveTo ["+ Bookmarks", "+ Search and Reference"])
    , ((mod4Mask, xK_p), TS.moveTo ["+ Bookmarks", "+ Programming"])
    , ((mod4Mask, xK_v), TS.moveTo ["+ Bookmarks", "+ Vim"])
    , ((mod4Mask .|. altMask, xK_a), TS.moveTo ["+ Bookmarks", "+ Linux", "+ Arch Linux"])
    , ((mod4Mask .|. altMask, xK_n), TS.moveTo ["+ Bookmarks", "+ Linux", "+ Linux News"])
    , ((mod4Mask .|. altMask, xK_w), TS.moveTo ["+ Bookmarks", "+ Linux", "+ Window Managers"])
    ]
#+END_SRC

** XPConfig
#+BEGIN_SRC haskell
myXPConfig :: XPConfig
myXPConfig = def
      { font                = myFont
--    , bgColor             = "#282c34"
--    , fgColor             = "#bbc2cf"
--    , bgHLight            = "#c792ea"
--    , fgHLight            = "#000000"
      , bgColor             = "#282a36"
      , fgColor             = "#f8f8f2"
      , fgHLight            = "#ffffff"
      , bgHLight            = "#ff79c6"
      , borderColor         = magenta
      , promptBorderWidth   = 1
      , promptKeymap        = myXPKeymap
      , position            = Top
   -- , position            = CenteredAt { xpCenterY = 0.8, xpWidth = 0.45 }
      , height              = 40
      , historySize         = 20
      , historyFilter       = id
      , defaultText         = []
      , autoComplete        = Just 100000  -- set Just 100000 for .1 sec
      , showCompletionOnTab = False
   -- , searchPredicate     = isPrefixOf
      , searchPredicate     = fuzzyMatch
      , defaultPrompter     = map toUpper  -- change prompt to UPPER
      -- , defaultPrompter     = unwords . map reverse . words  -- reverse the prompt
      -- , defaultPrompter     = drop 5 .id (++ "XXXX: ")  -- drop first 5 chars of prompt and add XXXX:
      , alwaysHighlight     = True
      , maxComplRows        = Just 10      -- set to 'Just 5' for 5 rows
      }

myXPConfig' :: XPConfig
myXPConfig' = myXPConfig
      { autoComplete        = Nothing
      }

{--
emojiXPConfig :: XPConfig
emojiXPConfig = myXPConfig'
      { font             = myEmojiFont
      }
--}

myXPKeymap :: M.Map (KeyMask,KeySym) (XP ())
myXPKeymap = M.fromList $
     map (first $ (,) controlMask)      -- control + <key>
     [ (xK_z, killBefore)               -- kill line backwards
     , (xK_k, killAfter)                -- kill line forwards
     , (xK_a, startOfLine)              -- move to the beginning of the line
     , (xK_e, endOfLine)                -- move to the end of the line
     , (xK_m, deleteString Next)        -- delete a character foward
     , (xK_b, moveCursor Prev)          -- move cursor forward
     , (xK_f, moveCursor Next)          -- move cursor backward
     , (xK_BackSpace, killWord Prev)    -- kill the previous word
     , (xK_y, pasteString)              -- paste a string
     , (xK_g, quit)                     -- quit out of prompt
     , (xK_bracketleft, quit)
     ]
     ++
     map (first $ (,) altMask)          -- meta key + <key>
     [ (xK_BackSpace, killWord Prev)    -- kill the prev word
     , (xK_f, moveWord Next)            -- move a word forward
     , (xK_b, moveWord Prev)            -- move a word backward
     , (xK_d, killWord Next)            -- kill the next word
     , (xK_n, moveHistory W.focusUp')   -- move up thru history
     , (xK_p, moveHistory W.focusDown') -- move down thru history
     ]
     ++
     map (first $ (,) 0) -- <key>
     [ (xK_Return, setSuccess True >> setDone True)
     , (xK_KP_Enter, setSuccess True >> setDone True)
     , (xK_BackSpace, deleteString Prev)
     , (xK_Delete, deleteString Next)
     , (xK_Left, moveCursor Prev)
     , (xK_Right, moveCursor Next)
     , (xK_Home, startOfLine)
     , (xK_End, endOfLine)
     , (xK_Down, moveHistory W.focusUp')
     , (xK_Up, moveHistory W.focusDown')
     , (xK_Escape, quit)
     ]
#+END_SRC

** Search in XMonad
#+BEGIN_SRC haskell
-- SEARCH --

archwiki, ebay, news, reddit, urban, thesaurus :: S.SearchEngine

archwiki = S.searchEngine "archwiki" "https://wiki.archlinux.org/index.php?search="
ebay     = S.searchEngine "ebay" "https://www.ebay.com/sch/i.html?_nkw="
news     = S.searchEngine "news" "https://news.google.com/search?q="
reddit   = S.searchEngine "reddit" "https://www.reddit.com/search/?q="
urban    = S.searchEngine "urban" "https://www.urbandictionary.com/define.php?term="
thesaurus = S.searchEngine "thesaurus" "https://www.thesaurus.com/browse/"

-- XMonad.Actions.Search
searchList :: [(String, S.SearchEngine)]
searchList = [ ("a", archwiki)
             , ("d", S.duckduckgo)
--           , ("e", ebay)
             , ("g", S.google)
--           , ("h", S.hoogle)
             , ("i", S.images)
--           , ("n", news)
             , ("r", reddit)
--           , ("s", S.stackage)
             , ("t", thesaurus)
             , ("v", S.vocabulary)
--           , ("b", S.wayback)
--           , ("u", urban)
             , ("w", S.wikipedia)
             , ("y", S.youtube)
--           , ("z", S.amazon)
             ]
#+END_SRC

** ScratchPad
#+BEGIN_SRC haskell
myScratchPads :: [NamedScratchpad]
myScratchPads = [ NS "terminal" spawnTerm findTerm manageTerm
                ]
  where
    spawnTerm  = myTerminal ++ " --name scratchpad 'zsh'"
    findTerm   = resource =? "scratchpad"
    manageTerm = customFloating $ W.RationalRect l t w h
               where
                 h = 0.9
                 w = 0.9
                 t = 0.95 -h
                 l = 0.95 -w

#+END_SRC

** Prompt
#+BEGIN_SRC haskell

calcPrompt c ans =
    inputPrompt c (trim ans) ?+ \input ->
        liftIO(runProcessWithInput "qalc" [input] "") >>= calcPrompt c
    where
        trim  = f . f
            where f = reverse . dropWhile isSpace

promptedShift :: X ()
promptedShift = workspacePrompt myXPConfig $ windows . W.shift

taskAdd :: String -> X ()
taskAdd input
                | head (splitOn  " "  input) =="add"  = spawn ("task add"++" "++ unwords (drop 1 $ words input))
                | head (splitOn  " "  input) =="list" = spawn (myTerminal ++ " sh"++" -c"++" \"task list;read\"")
                | otherwise = spawn ("dunstify -u normal"++" "++input)

taskAddPrompt :: X ()
taskAddPrompt = inputPrompt myXPConfig "TaskAdd" ?+ taskAdd

-- filePathPrompt = inputPrompt myXPConfig "file path"
-- mkXPrompt :: XPrompt p => p -> XPConfig -> ComplFunction -> (String -> X ()) -> X ()
-- filePathPrompt = mkXPrompt filePathPrompt' myXPConfig filePathComp
filePathPrompt = inputPromptWithCompl myXPConfig "file path" filePathComp
filePathComp = mkComplFunFromList ["/home/oogeek/Notes", "/home/oogeek/learn.txt"]

appendWorkspacePrompt' = inputPrompt myXPConfig "Add workspace name:" ?+ \input-> appendWorkspace input
swapWorkspacePrompt' = inputPrompt myXPConfig "Swap workspace with:" ?+ \input ->  windows $ XMonad.Actions.SwapWorkspaces.swapWithCurrent input

#+END_SRC
** Hooks
#+BEGIN_SRC haskell
myManageHook :: XMonad.Query (Data.Monoid.Endo WindowSet)
myManageHook = composeAll
     [
       className =? "Foxit Reader"          --> doShift "doc"
     , className =? "Zathura"               --> doShift "doc"
     , className =? "Emacs"                 --> doShift "dev"
     , className =? "Droidcam"              --> doShift "vid"
     , className =? "mpv"                   --> doShift "vid"
     , className =? "VirtualBox Manager"    --> doShift "vbox"
     , className =? "VirtualBox Manager"    --> doFloat
     , (className =? "firefox" <&&> resource =? "Dialog") --> doFloat
     , className =? "Brave-browser"         --> doShift "www"
     , className =? "Firefox Beta"          --> doShift "www"
     , className =? "Chromium"              --> doShift "www"
     , className =? "mpv"                   --> doShift "vid"
     , className =? "mpv"                   --> customFloating(W.RationalRect 0.01 0.68 0.3 0.3)
     , className =? "firefox"               --> doShift "fox"
     , className =? "TelegramDesktop"       --> doShift "telegram"
     ] <+> namedScratchpadManageHook myScratchPads

-- myXpropHook = xPropManageHook xPropMatches
{--
xPropMatches :: [XPropMatch]
xPropMatches = [ ([ (wM_CLASS, elem "GNU Image")], \w -> float w >> return (W.shift (myWorkspaces !! 2)))
              -- , ([ (wM_COMMAND, elem "screen"), (wM_CLASS, elem "xterm")], pmX (addTag "screen"))
             --  , ([ (wM_NAME, any (\w-> pack "Firefox" `isInfixOf` pack w))], pmP (W.shift (myWorkspaces !! 3)))
               ]
--}

myFadeHook = composeAll [
                        isUnfocused --> transparency 1.0
                        ,opaque
                        ]

--myWallHook = wallpaperSetter WallpaperConf {
--        wallpaperBaseDir = "/home/oogeek/Wallpapers"
--        , wallpapers =  WallpaperList [ (i, WallpaperDir "Awesome") | i <- myWorkspaces ]
--        }

--myLogHook :: X ()
--myLogHook = fadeInactiveLogHook fadeAmount
--    where fadeAmount = 1.0

#+END_SRC

** Workspaces, keymaps
#+BEGIN_SRC haskell
keypad = ["<KP_End>", "<KP_Down>", "<KP_Page_Down>", "<KP_Left>", "<KP_Begin>", "<KP_Right>", "<KP_Home>", "<KP_Up>", "<KP_Page_Up>" ]
keypad'' = ["KP_End", "KP_Down", "KP_Page_Down", "KP_Left", "KP_Begin", "KP_Right", "KP_Home", "KP_Up", "KP_Page_Up" ]
keypad' = ["KP_1","KP_2","KP_3","KP_4","KP_5","KP_6","KP_7","KP_8","KP_9"]
keypadInd = M.fromList $ zip myWorkspaces keypad'' -- (,) == \x y -> (x,y)

myWorkspaces = ["dev", "sys", "www", "doc", "test", "chat", "vid", "vbox", "fox"]
myWorkspaceIndices = M.fromList $ zip myWorkspaces [1..] -- (,) == \x y -> (x,y)

mGestures = M.fromList
        [ ([L,D], \_->flashText def 1 "haha")
        , ([U], \w -> focus w >> windows W.swapUp)
        , ([D], \w -> focus w >> windows W.swapDown)
        , ([R, D], \_ -> sendMessage NextLayout)
        ]

myMouse = [ ((mod4Mask, button3), \w -> focus w >> Flex.mouseResizeWindow w >> ifClick (windows $ W.float w $ W.RationalRect 0 0 1 1)), ((mod4Mask .|. shiftMask, button3), mouseGesture mGestures) ]

myKeys :: [(String, X ())]
myKeys =
        [ ("M-C-r", spawn "/home/oogeek/scripts/xmonad-recompile.sh")
        , ("M-S-r", spawn "xmonad --restart")
        , ("M-S-q", confirmPrompt myXPConfig "exit" $ io exitSuccess)
        , ("M1-<Tab>", cycleRecentWS [xK_Alt_L] xK_Tab xK_grave)

    -- Wallpaper
        , ("M1-l", spawn "/home/oogeek/scripts/wallnext.sh")
        , ("M1-t", spawn "/home/oogeek/scripts/walltaste.sh")
        , ("M1-n", spawn "/home/oogeek/scripts/wallpaper-taste-choice.sh")
        , ("M1-e", spawn "/home/oogeek/scripts/wallemergency.sh")
        , ("M1-r", spawn "/home/oogeek/scripts/wallremove.sh")

    -- Open my preferred terminal
        , ("M-<Return>", spawn (myTerminal ++ " zsh"))

    -- Screenshot
        , ("M1-s", spawn "/home/oogeek/scripts/screenshot.sh" )
        , ("M1-S-s", spawn "flameshot gui")
        , ("M1-S-o", spawn "/home/oogeek/scripts/addshadow")

    -- sound
        , ("M1-S-u", spawn "pamixer -i 2")
        , ("M1-S-p", spawn "pamixer -d 2")
        , ("M1-S-m", spawn "pamixer -t")

    -- Run Prompt
        ,("M-S-<Return>", shellPrompt myXPConfig') -- Xmonad Shell Prompt
        ,("M-M1-<Return>", spawn " ~/.config/rofi/launchers/colorful/launcher.sh" ) -- rofi

    -- Other Prompts
        , ("M-p c", calcPrompt myXPConfig' "qalc") -- calcPrompt
        , ("M-p m", manPrompt myXPConfig')          -- manPrompt
    --  , ("M-p s", mkUnicodePrompt "xsel" ["-b"] "/home/oogeek/.xmonad/UnicodeData.txt" emojiXPConfig) -- unicodePrompt (for copying emojis)
        , ("M-p x", xmonadPrompt myXPConfig')       -- xmonadPrompt
        , ("M-p t", taskAddPrompt)

    -- Useful programs to have a keybinding for launch
        , ("M-y", spawn (myBrowser ++ " www.youtube.com"))
        , ("M-a", spawn (myBrowser ++ " wiki.archlinux.org"))
        , ("M-g", spawn (myBrowser ++ " www.github.com"))
        , ("M-r", spawn (myBrowser ++ " aur.archlinux.org"))
        , ("M-d", spawn (myBrowser ++ " www.duckduckgo.com"))

    -- emoji
        , ("M1-C-o", spawn "rofimoji")

    -- Window Menu
        , ("M-o", bringMenuArgs' "rofi" ["-dmenu"] )

    -- htop
        , ("M-M1-h", spawn (myTerminal ++ " sh -c htop"))

    -- Aur updates
        , ("M-M1-u", spawn "/home/oogeek/scripts/aurcheck.sh")

    -- Disk
        , ("M-M1-t", spawn "/home/oogeek/scripts/hddtemp.sh")

    -- Dunst notification
        , ("M1-c", spawn "dunstctl close-all" )
        , ("M1-p", spawn "dunstctl history-pop" )

    -- Workspaces
    --  , ("M-.", nextScreen)  -- Switch focus to next monitor
    --  , ("M-,", prevScreen)  -- Switch focus to prev monitor
        , ("M-S-<KP_Add>", shiftTo Next nonNSP >> moveTo Next nonNSP)
        , ("M-S-<KP_Subtract>", shiftTo Prev nonNSP >> moveTo Prev nonNSP)
    --  , ("M-C-<R>",   DO.swapWith Next NonEmptyWS)
    --  , ("M-C-<L>",   DO.swapWith Prev NonEmptyWS)
    --  , ("M-C-<R>",swapWorkspacePrompt')

    -- Url to Qrcode
        , ("M-S-u", spawn "/home/oogeek/scripts/qrcode.sh" )

    -- Floating windows
        , ("M-f", sendMessage (T.Toggle "floats"))
        , ("M-t", withFocused $ windows . W.sink)
        , ("M-S-t", sinkAll)

    -- Increase/decrease spacing (gaps)
        , ("M-<KP_Subtract>", decWindowSpacing 4)
        , ("M-<KP_Add>", incWindowSpacing 4)
        , ("M-M1-<KP_Subtract>", decScreenSpacing 4)
        , ("M-M1-<KP_Add>", incScreenSpacing 4)

    -- Grid Select
        , ("C-g g", spawnSelected' myAppGrid)
        , ("C-g t", goToSelected $ mygridConfig myColorizer)
        , ("C-g b", bringSelected $ mygridConfig myColorizer)

    -- Tree Select
        , ("C-t t", treeselectAction tsDefaultConfig)

    -- Screen-Locking
        , ("C-M1-l", spawn "XSECURELOCK_NO_COMPOSITE=1 XSECURELOCK_PASSWORD_PROMPT='time_hex' xsecurelock" )

    -- Tag
        , ("M-C-a", tagPrompt myXPConfig' $ withFocused . addTag )
        , ("M-C-h", tagPrompt myXPConfig' (`withTaggedGlobalP` shiftHere))
        , ("M-C-d", tagDelPrompt myXPConfig)
        , ("M-C-t", tagPrompt myXPConfig  focusUpTaggedGlobal)
        , ("M-C-f", tagPrompt myXPConfig (`withTaggedGlobal` float))
        , ("M-C-n", do
           date <- io $ fmap (formatTime defaultTimeLocale "[%Y-%m-%d %H:%M] ") getZonedTime
           filePathPrompt ?+ \path->appendFilePrompt' myXPConfig (date ++) path )
        , ("M1-C-d", removeEmptyWorkspace)
        , ("M1-C-s", selectWorkspace myXPConfig)
        , ("M1-C-c", withWorkspace myXPConfig (windows . copy))
        , ("M1-C-r", XMonad.Actions.DynamicWorkspaces.renameWorkspace myXPConfig)
        , ("M1-C-a", appendWorkspacePrompt')
        , ("M-C-w", promptedShift)
        , ("M-C-c", xmonadPrompt myXPConfig')


    -- Windows navigation
        , ("M-m", windows W.focusMaster)  -- Move focus to the master window
        , ("M-j", windows W.focusDown)    -- Move focus to the next window
        , ("M-k", windows W.focusUp)      -- Move focus to the prev window
        , ("M-S-m", windows W.swapMaster) -- Swap the focused window and the master window
        , ("M-S-j", windows W.swapDown)   -- Swap focused window with next window
        , ("M-S-k", windows W.swapUp)     -- Swap focused window with prev window
        , ("M-<Backspace>", promote)      -- Moves focused window to master, others maintain order
        , ("M-S-<Tab>", rotSlavesDown)    -- Rotate all windows except master and keep focus in place
        , ("M-C-<Tab>", rotAllDown)       -- Rotate all the windows in the current stack


    -- Kill windows
        , ("M-S-c", kill1)     -- Kill the currently focused client
        , ("M-S-a", killAll)   -- Kill all windows on current workspace

    -- Windows Copy

        , ("M-C-S-0", windows copyToAll )
        , ("M-C-S-1", windows $ copy $ head myWorkspaces)
        , ("M-C-S-2", windows $ copy (myWorkspaces !! 1))
        , ("M-C-S-3", windows $ copy (myWorkspaces !! 2))
        , ("M-C-S-4", windows $ copy (myWorkspaces !! 3))
        , ("M-C-S-5", windows $ copy (myWorkspaces !! 4))
        , ("M-C-S-6", windows $ copy (myWorkspaces !! 5))
        , ("M-C-S-7", windows $ copy (myWorkspaces !! 6))
        , ("M-C-S-8", windows $ copy (myWorkspaces !! 7))
        , ("M-C-S-9", windows $ copy (myWorkspaces !! 8))
        , ("M-C-S-k", killAllOtherCopies)
    --  , ("M-C-v", windows (viewOnScreen 0 $ myWorkspaces !! 0))
    --  , ("M-C-v", onScreen' (spawn "sleep 1 && /home/oogeek/scripts/screenshot.sh") (XMonad.Actions.OnScreen.FocusTag (myWorkspaces !! 0)) 0  )
    --  , ("M-C-v", windows (W.greedyView (myWorkspaces !! 0))  >> prevWS)
    --  , ("M-C-v", windows $ W.greedyView (myWorkspaces !! 0))
    --  , ("M-C-v", windows $ onScreen (W.greedyView $ myWorkspaces !! 0)  (XMonad.Actions.OnScreen.FocusTag $ myWorkspaces !! 0) 0)

    -- Layouts
        , ("M-<Tab>", sendMessage NextLayout)           -- Switch to next layout
        , ("M-C-M1-<Up>", sendMessage Arrange)
        , ("M-C-M1-<Down>", sendMessage DeArrange)
        , ("M-<Space>", sendMessage (MT.Toggle NBFULL) >> sendMessage ToggleStruts) -- Toggles noborder/full
        , ("M-S-<Space>", sendMessage ToggleStruts)     -- Toggles struts
        , ("M-S-n", sendMessage $ MT.Toggle NOBORDERS)  -- Toggles noborder

    -- Increase/decrease windows in the master pane or the stack
        , ("M-S-<Up>", sendMessage (IncMasterN 1))      -- Increase number of clients in master pane
        , ("M-S-<Down>", sendMessage (IncMasterN (-1))) -- Decrease number of clients in master pane
        , ("M-C-<Up>", increaseLimit)                   -- Increase number of windows
        , ("M-C-<Down>", decreaseLimit)                 -- Decrease number of windows

    -- Window resizing
        , ("M-h", sendMessage Shrink)                   -- Shrink horiz window width
        , ("M-l", sendMessage Expand)                   -- Expand horiz window width
        , ("M-M1-j", sendMessage MirrorShrink)          -- Shrink vert window width
        , ("M-M1-k", sendMessage MirrorExpand)          -- Exoand vert window width

    -- Sublayouts
    -- This is used to push windows to tabbed sublayouts, or pull them out of it.
    {--    , ("M-C-h", sendMessage $ pullGroup L)
        , ("M-C-l", sendMessage $ pullGroup R)
        , ("M-C-k", sendMessage $ pullGroup U)
        , ("M-C-j", sendMessage $ pullGroup D)
        , ("M-C-m", withFocused (sendMessage . MergeAll))
        , ("M-C-u", withFocused (sendMessage . UnMerge))
        , ("M-C-/", withFocused (sendMessage . UnMergeAll))
        , ("M-C-.", onGroup W.focusUp')    -- Switch focus to next tab
        , ("M-C-,", onGroup W.focusDown')  -- Switch focus to prev tab
    --}

    -- Scratchpads
        , ("M-C-<Return>", namedScratchpadAction myScratchPads "terminal")

    -- Emacs (CTRL-e followed by a key)
     {--
        , ("C-e e", spawn "emacsclient -c -a 'emacs'")                            -- start emacs
        , ("C-e b", spawn "emacsclient -c -a 'emacs' --eval '(ibuffer)'")         -- list emacs buffers
        , ("C-e d", spawn "emacsclient -c -a 'emacs' --eval '(dired nil)'")       -- dired emacs file manager
        , ("C-e i", spawn "emacsclient -c -a 'emacs' --eval '(erc)'")             -- erc emacs irc client
        , ("C-e m", spawn "emacsclient -c -a 'emacs' --eval '(mu4e)'")            -- mu4e emacs email client
        , ("C-e n", spawn "emacsclient -c -a 'emacs' --eval '(elfeed)'")          -- elfeed emacs rss client
        , ("C-e s", spawn "emacsclient -c -a 'emacs' --eval '(eshell)'")          -- eshell within emacs
        , ("C-e t", spawn "emacsclient -c -a 'emacs' --eval '(mastodon)'")        -- mastodon within emacs
        , ("C-e v", spawn "emacsclient -c -a 'emacs' --eval '(+vterm/here nil)'") -- vterm within emacs
        -- emms is an emacs audio player. I set it to auto start playing in a specific directory.
        , ("C-e a", spawn "emacsclient -c -a 'emacs' --eval '(emms)' --eval '(emms-play-directory-tree \"~/Music/Non-Classical/70s-80s/\")'")
        --}

    -- Multimedia Keys
   {--     , ("<XF86AudioPlay>", spawn (myTerminal ++ "mocp --play"))
        , ("<XF86AudioPrev>", spawn (myTerminal ++ "mocp --previous"))
        , ("<XF86AudioNext>", spawn (myTerminal ++ "mocp --next"))
        , ("<XF86AudioMute>",   spawn "amixer set Master toggle")
        , ("<XF86AudioLowerVolume>", spawn "amixer set Master 5%- unmute")
        , ("<XF86AudioRaiseVolume>", spawn "amixer set Master 5%+ unmute")
        , ("<XF86HomePage>", spawn "firefox")
        , ("<XF86Search>", safeSpawn "firefox" ["https://www.duckduckgo.com/"])
        , ("<XF86Mail>", runOrRaise "thunderbird" (resource =? "thunderbird"))
        , ("<XF86Calculator>", runOrRaise "qalculate-gtk" (resource =? "qalculate-gtk"))
        , ("<XF86Eject>", spawn "toggleeject")
        , ("<Print>", spawn "scrotd 0")
        ]
  --}
   ]
    -- X-selection-paste buffer
        ++ [("M-s " ++ k, S.promptSearch myXPConfig' f) | (k,f) <- searchList ]
        ++ [("M-S-s " ++ k, S.selectSearch f) | (k,f) <- searchList ]
        ++ [("M-S-"++i, withNthWorkspace  W.shift j) | (i,j) <- zip keypad [0..]]
        ++ [("M-"++i, withNthWorkspace W.greedyView j) | (i,j) <- zip keypad [0..]]
        ++ [("M1-"++i, withNthWorkspace W.greedyView j) | (i,j)<-zip keypad [9..]]
        ++ [("M1-S-"++i, withNthWorkspace  W.shift j) | (i,j) <- zip keypad [9..]]
    -- The following lines are needed for named scratchpads.
          where nonNSP          = WSIs (return (\ws -> W.tag ws /= "nsp"))
                nonEmptyNonNSP  = WSIs (return (\ws -> isJust (W.stack ws) && W.tag ws /= "nsp"))


myTabTheme = def { fontName            = myFont
                 , activeColor         = black
                 , inactiveColor       = black
                 , activeBorderColor   = purple
                 , inactiveBorderColor = black
                 , activeBorderWidth   = 0
                 , inactiveBorderWidth = 0
                 , activeTextColor     = magenta
                 , inactiveTextColor   = white
                 }
#+END_SRC
** Layout
#+BEGIN_SRC haskell
myShowWNameTheme :: SWNConfig
myShowWNameTheme = def
    { swn_font              = "xft:Ubuntu:bold:size=60"
    , swn_fade              = 0.5
    , swn_bgcolor           = "#1c1f24"
    , swn_color             = "#ffffff"
    }

--Makes setting the spacingRaw simpler to write. The spacingRaw module adds a configurable amount of space around windows.
mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True

-- Below is a variation of the above except no borders are applied
-- if fewer than two windows. So a single window has no gaps.
mySpacing' :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing' i = spacingRaw True (Border i i i i) True (Border i i i i) True

-- limitWindows n sets maximum number of windows displayed for layout.
-- mySpacing n sets the gap size around the windows.

tall     = renamed [Replace "tall"]
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 12
           $ mySpacing 8
           $ ResizableTall 1 (3/100) (1/2) []
{--
magnify  = renamed [Replace "magnify"]
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ magnifier
           $ limitWindows 12
           $ mySpacing 8
           $ ResizableTall 1 (3/100) (1/2) []
monocle  = renamed [Replace "monocle"]
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 20 Full
--}
floats   = renamed [Replace "floats"]
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 20 simplestFloat
grid     = renamed [Replace "grid"]
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 12
           $ mySpacing 0
           $ mkToggle (single MIRROR)
           $ Grid (16/10)
spirals  = renamed [Replace "spirals"]
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ mySpacing' 8
           $ spiral (6/7)
{--
threeCol = renamed [Replace "threeCol"]
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 7
           $ ThreeCol 1 (3/100) (1/2)
threeRow = renamed [Replace "threeRow"]
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 7
           -- Mirror takes a layout and rotates it by 90 degrees.
           -- So we are applying Mirror to the ThreeCol layout.
           $ Mirror
           $ ThreeCol 1 (3/100) (1/2)
--}
tabs     = renamed [Replace "tabs"]
           -- I cannot add spacing to this layout because it will
           -- add spacing between window and tabs which looks bad.
           $ tabbed shrinkText myTabTheme

-- myl = imageButtonDeco shrinkText defaultThemeWithImageButtons myafter
myl = screenCornerLayoutHook  myvisualL
myvisualL =  windowSwitcherDecoration shrinkText def (draggingVisualizer myLayoutHook)
-- myl = myafter
-- myshowL = showWName' myShowWNameTheme myLayoutHook

-- myMagicFocus = magicFocus myLayoutHook
myLayoutHook = avoidStruts $ mouseResize $ windowArrange $ T.toggleLayouts floats
               $ mkToggle (NBFULL ?? NOBORDERS ?? EOT) myDefaultLayout
             where
               myDefaultLayout =     tall
                          --       ||| magnify
                          --       ||| noBorders monocle
                                 ||| floats
                                 ||| noBorders tabs
                                 ||| grid
                                 ||| spirals
                          --       ||| threeCol
                          --       ||| threeRow
                                 ||| Accordion
#+END_SRC
** Xmobar related
#+BEGIN_SRC haskell
-- XMOBAR --

copyLogHook h = do
   copies <- wsContainingCopies
   let check ws | ws `elem` copies = xmobarColor orange "" $ clickable'  ws
                | otherwise = xmobarColor yellow "" . wrap "*" "" $ clickable' ws
   dynamicLogWithPP myXmobarConfig {ppHidden = check, ppOutput = hPutStrLn h} 
   -- hPutStrLn h}
   -- replace "hPutStrLn h" with "writeFile" to examine the output to be passed to xmobar in a file
   -- writeFile "girlfriendcaps.txt"  } 

clickable' ws = ws 

clickable ws num = "<action=xdotool key super+"++show key++">"++" "++ws++" "++"</action>"
     where key = keypad'' !! num
     
clickable'' ws num = "<action=xdotool key alt+"++show key++">"++" "++ws++" "++"</action>"
     where key = keypad'' !! num

check :: String->String
check a 
        | any (\n->n !! 12 =='[') [a] = take 12 a ++ "[ "++ take (len-19) ( drop 13 a) ++" ]" ++ "</fc>" 
        | otherwise = a
        where len =  length a

-- make xmobar clickable even with extra (>9) workspaces
pp (ws:l:t:ex) 
          | len <=9  = [ww]++[l]++ex++[t] 
          | otherwise  = [ww]++[jj]++[l]++ex++[t]
        where len = length (words ws)
              ww = unwords [ clickable (check a) b  | (a,b)<-kk ]
                    where kk = zip (words ws) [0..8]
              jj = unwords [ clickable'' (check a) b  | (a,b)<-jjj ]
                   where jjj = zip (drop 9 (words ws)) [0..]

myXmobarConfig = xmobarPP {
      ppCurrent = xmobarColor green "" . wrap "[" "]"
    , ppVisible = xmobarColor purple ""
    , ppHiddenNoWindows = xmobarColor purple ""
    , ppTitle = xmobarColor cyan "" . shorten 65
    , ppSep =  "<fc=white> | </fc>"
 -- , ppSort = DO.getSortByOrder
 -- , ppWsSep = "#"
    , ppLayout = xmobarColor magenta "" . last . words
    , ppUrgent = xmobarColor "#C45500" "" . wrap "!" "!"
    , ppExtras  = [windowCount]
    , ppOrder  = pp
}
#+END_SRC

** Main Config, Main
#+BEGIN_SRC haskell
myConfig' = myConfig `additionalKeysP` myKeys `removeKeysP` ["M-S-" ++ [n] | n <- ['1'..'9']] `removeKeysP` ["M-" ++ [n] | n <- ['1'..'9']] `additionalKeysP` [("M-S-4",spawn "killall picom; sleep 1; picom&")] `additionalMouseBindings` myMouse

--`additionalKeys` M.toList (planeKeys mod4Mask (Lines 3) Circular)

myConfig = def { manageHook = ( isFullscreen --> doFullFloat ) <+> myManageHook  <+> manageDocks
        -- Run xmonad commands from command line with "xmonadctl command". Commands include:
        -- shrink, expand, next-layout, default-layout, restart-wm, xterm, kill, refresh, run,
        -- focus-up, focus-down, swap-up, swap-down, swap-master, sink, quit-wm. You can run
        -- "xmonadctl 0" to generate full list of commands written to ~/.xsession-errors.
        -- To compile xmonadctl: ghc -dynamic xmonadctl.hs
        , handleEventHook    = serverModeEventHookCmd
                               <+> handleTimerEvent
                               <+> fadeWindowsEventHook
                               <+> serverModeEventHook
                               <+> serverModeEventHookF "XMONAD_PRINT" (io . putStrLn)
                               <+> docksEventHook
                               <+> screenCornerEventHook
                               <+> fullscreenEventHook
                             --  <+> ewmhDesktopsEventHook
        , modMask            = myModMask
        , terminal           = myTerminal
        , startupHook        = myStartupHook
        , layoutHook         = myl
        , workspaces         = myWorkspaces
        , borderWidth        = myBorderWidth
        , normalBorderColor  = myNormColor
        , focusedBorderColor = myFocusColor
        }

-- MAIN --

main :: IO ()
main = do
    xmproc0 <- spawnPipe "xmobar -x 0 $HOME/.config/xmobar/xmobarrc0"
    xmonad $ withUrgencyHook dzenUrgencyHook { args = ["-bg", "darkgreen", "-p", "1"] }
           $ ewmh myConfig' {
        logHook =   fadeWindowsLogHook myFadeHook
                    <+> workspaceHistoryHook
                    <+> copyLogHook xmproc0
    }

#+END_SRC
